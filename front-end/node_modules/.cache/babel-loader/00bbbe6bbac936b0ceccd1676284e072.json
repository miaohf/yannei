{"remainingRequest":"D:\\mycode\\Yanei\\front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\mycode\\Yanei\\front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\mycode\\Yanei\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\mycode\\Yanei\\front-end\\node_modules\\vue-excel-export\\VueComment.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\mycode\\Yanei\\front-end\\node_modules\\vue-excel-export\\VueComment.vue","mtime":1668947701948},{"path":"D:\\mycode\\Yanei\\front-end\\babel.config.js","mtime":1580387978000},{"path":"D:\\mycode\\Yanei\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668947705996},{"path":"D:\\mycode\\Yanei\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1668956708481},{"path":"D:\\mycode\\Yanei\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1668947705996},{"path":"D:\\mycode\\Yanei\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1668956821544}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAEA;EACAA;EACAC;IACA;IACAC;MACAA;MACAC;IACA;IACA;IACAC;MACAF;MACAG;MACAF;IACA;IACA;IACA;IACAG;MACAJ;MACAG;IACA;IACA;IACA;IACAE;MACAL;MACAG;IACA;IACA;IACAG;MACAN;MACAG;MACAF;IACA;IACA;IACAM;MACAN;IACA;IACA;IACAO;MACAP;IACA;IACA;IACAH;MACAE;MACAC;IACA;IACAQ;MACAT;IACA;IACAU;MACAV;MACAC;QAAA;MAAA;IACA;IACAU;MACAX;MACAC;IACA;IACA;IACAW;MACAZ;IACA;IACA;IACAa;MACAb;IACA;EACA;EACAc;IACA;IACAC;MACA;MACA;IACA;IAEAC;MACA;MAEA;IACA;EACA;EACAC;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACA;cAAA;gBAEAhB;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACA;cAAA;gBAAAA;cAAA;gBAAA,MAEA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAIAiB;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA,iCAEA,aACA,uBACA,qCACA,YACA;cAAA;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA,iCACA,aACA,uBACA,oCACA,kBACA;cAAA;gBAAA,iCAEA,aACA,uBACA,YACA,2BACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;IACA;AACA;AACA;IACAC;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACAC;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACA;cAAA;gBACAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACA;MAAA;QAAA;MAAA;MAAA;IAAA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA,cACA;MACA;MACA;MACA;;MAEA;MACA;QACAC,+BACA,YACA,sDACA;MACA;;MAEA;MACAA;MACA;QACAA;MACA;MACAA;MACAA;;MAEA;MACAA;MACAtB;QACAsB;QACA;UACAA;QACA;QACAA;MACA;MACAA;;MAEA;MACA;QACAA;QACAA,+BACA,aACA,sDACA;QACAA;MACA;MAEA;IACA;IACA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;MACA;QACAC;MACA;MACA;MACA;QACAA;QACAA;MACA;MACAA;MACAA;MACA;MACAxB;QACA;UACA;UACA;YACAyB;UACA;UACAD;UACAA;QACA;QACAA;QACAA;MACA;MACA;MACA;QACAA;MACA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;IACAE;MACA;MACA;MACA;MACA1B;QACA;QACA;UACA;UACA2B;QACA;QACAC;MACA;MAEA;IACA;IACAC;MACA;QACA;MACA;MAEA;MACA;QACAC;MACA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;QACA;UACAC;QACA;MACA;QACAA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MAEA,YACAC,kBACA,wBACAA,wDAEAA;MAEA,oCACAA;MAEA;IACA;IAEA;AACA;AACA;IACAC;MACA,yEACA;IACA;IAEAC;MACA;MAAA,2CACAC;QAAA;MAAA;QAAA;UAAA;UACA,gBACAC;QACA;MAAA;QAAA;MAAA;QAAA;MAAA;MACA;IACA;IAEAC;MACA,oCACA;MACA;MACA;IACA;IACAC;MACA,4DACAN,QACA;IACA;IACAO;MACA;MACA;MACA;MACA;MACA;QACAC;MACA;MACA;QAAA5C;MAAA;IACA;EACA;AACA","names":["name","props","type","default","data","required","fields","exportFields","defaultValue","title","footer","fetch","meta","worksheet","beforeGenerate","beforeFinish","computed","idName","downloadFields","methods","generate","json","export","blob","download","jsonToXLS","xlsData","jsonToCSV","csvData","escapedCSV","getProcessedJson","newItem","newData","getKeys","keys","parseExtraData","parseData","getValue","value","valueReformattedForMultilines","getValueFromNestedItem","indexes","nestedItem","getValueFromCallback","parseValue","base64ToBlob","u8arr"],"sourceRoot":"node_modules/vue-excel-export","sources":["VueComment.vue"],"sourcesContent":["<template>\n    <div\n            :id=\"idName\"\n            @click=\"generate\">\n        <slot>\n            Download {{name}}\n        </slot>\n    </div>\n</template>\n\n<script>\n    import download from \"browser-downloads\";\n\n    export default {\n        name: 'export-excel',\n        props: {\n            // mime type [xls, csv]\n            type: {\n                type: String,\n                default: \"xls\"\n            },\n            // Json to download\n            data: {\n                type: Array,\n                required: false,\n                default: null\n            },\n            // fields inside the Json Object that you want to export\n            // if no given, all the properties in the Json are exported\n            fields: {\n                type: Object,\n                required: false\n            },\n            // this prop is used to fix the problem with other components that use the\n            // variable fields, like vee-validate. exportFields works exactly like fields\n            exportFields: {\n                type: Object,\n                required: false\n            },\n            // Use as fallback when the row has no field values\n            defaultValue: {\n                type: String,\n                required: false,\n                default: \"\"\n            },\n            // Title(s) for the data, could be a string or an array of strings (multiple titles)\n            title: {\n                default: null\n            },\n            // Footer(s) for the data, could be a string or an array of strings (multiple footers)\n            footer: {\n                default: null\n            },\n            // filename to export\n            name: {\n                type: String,\n                default: \"data.xls\"\n            },\n            fetch: {\n                type: Function,\n            },\n            meta: {\n                type: Array,\n                default: () => []\n            },\n            worksheet: {\n                type: String,\n                default: \"Sheet1\"\n            },\n            //event before generate was called\n            beforeGenerate: {\n                type: Function,\n            },\n            //event before download pops up\n            beforeFinish: {\n                type: Function,\n            },\n        },\n        computed: {\n            // unique identifier\n            idName() {\n                var now = new Date().getTime();\n                return \"export_\" + now;\n            },\n\n            downloadFields() {\n                if (this.fields !== undefined) return this.fields;\n\n                if (this.exportFields !== undefined) return this.exportFields;\n            }\n        },\n        methods: {\n            async generate() {\n                if (typeof this.beforeGenerate === 'function') {\n                    await this.beforeGenerate();\n                }\n                let data = this.data;\n                if (typeof this.fetch === 'function' || !data)\n                    data = await this.fetch();\n\n                if (!data || !data.length) {\n                    return;\n                }\n\n                let json = this.getProcessedJson(data, this.downloadFields);\n                if (this.type === \"html\") {\n                    // this is mainly for testing\n                    return this.export(\n                        this.jsonToXLS(json),\n                        this.name.replace(\".xls\", \".html\"),\n                        \"text/html\"\n                    );\n                } else if (this.type === \"csv\") {\n                    return this.export(\n                        this.jsonToCSV(json),\n                        this.name.replace(\".xls\", \".csv\"),\n                        \"application/csv\"\n                    );\n                }\n                return this.export(\n                    this.jsonToXLS(json),\n                    this.name,\n                    \"application/vnd.ms-excel\"\n                );\n            },\n            /*\n                Use downloadjs to generate the download link\n                */\n            export: async function (data, filename, mime) {\n                let blob = this.base64ToBlob(data, mime);\n                if (typeof this.beforeFinish === 'function')\n                    await this.beforeFinish();\n                download(blob, filename, mime);\n            },\n            /*\n                jsonToXLS\n                ---------------\n                Transform json data into an xml document with MS Excel format, sadly\n                it shows a prompt when it opens, that is a default behavior for\n                Microsoft office and cannot be avoided. It's recommended to use CSV format instead.\n                */\n            jsonToXLS(data) {\n                let xlsTemp =\n                    '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\n                let xlsData = \"<thead>\";\n                const colspan = Object.keys(data[0]).length;\n                let _self = this;\n\n                //Header\n                if (this.title != null) {\n                    xlsData += this.parseExtraData(\n                        this.title,\n                        '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\n                    );\n                }\n\n                //Fields\n                xlsData += \"<tr>\";\n                for (let key in data[0]) {\n                    xlsData += \"<th>\" + key + \"</th>\";\n                }\n                xlsData += \"</tr>\";\n                xlsData += \"</thead>\";\n\n                //Data\n                xlsData += \"<tbody>\";\n                data.map(function (item, index) {\n                    xlsData += \"<tr>\";\n                    for (let key in item) {\n                        xlsData += \"<td>\" + _self.valueReformattedForMultilines(item[key]) + \"</td>\";\n                    }\n                    xlsData += \"</tr>\";\n                });\n                xlsData += \"</tbody>\";\n\n                //Footer\n                if (this.footer != null) {\n                    xlsData += \"<tfoot>\";\n                    xlsData += this.parseExtraData(\n                        this.footer,\n                        '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\n                    );\n                    xlsData += \"</tfoot>\";\n                }\n\n                return xlsTemp.replace(\"${table}\", xlsData).replace(\"${worksheet}\", this.worksheet);\n            },\n            /*\n                jsonToCSV\n                ---------------\n                Transform json data into an CSV file.\n                */\n            jsonToCSV(data) {\n                var csvData = [];\n                //Header\n                if (this.title != null) {\n                    csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\n                }\n                //Fields\n                for (let key in data[0]) {\n                    csvData.push(key);\n                    csvData.push(\",\");\n                }\n                csvData.pop();\n                csvData.push(\"\\r\\n\");\n                //Data\n                data.map(function (item) {\n                    for (let key in item) {\n                        let escapedCSV = '=\\\"' + item[key] + '\\\"'; // cast Numbers to string\n                        if (escapedCSV.match(/[,\"\\n]/)) {\n                            escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\n                        }\n                        csvData.push(escapedCSV);\n                        csvData.push(\",\");\n                    }\n                    csvData.pop();\n                    csvData.push(\"\\r\\n\");\n                });\n                //Footer\n                if (this.footer != null) {\n                    csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\n                }\n                return csvData.join(\"\");\n            },\n            /*\n                getProcessedJson\n                ---------------\n                Get only the data to export, if no fields are set return all the data\n                */\n            getProcessedJson(data, header) {\n                let keys = this.getKeys(data, header);\n                let newData = [];\n                let _self = this;\n                data.map(function (item, index) {\n                    let newItem = {};\n                    for (let label in keys) {\n                        let property = keys[label];\n                        newItem[label] = _self.getValue(property, item);\n                    }\n                    newData.push(newItem);\n                });\n\n                return newData;\n            },\n            getKeys(data, header) {\n                if (header) {\n                    return header;\n                }\n\n                let keys = {};\n                for (let key in data[0]) {\n                    keys[key] = key;\n                }\n                return keys;\n            },\n            /*\n                parseExtraData\n                ---------------\n                Parse title and footer attribute to the csv format\n                */\n            parseExtraData(extraData, format) {\n                let parseData = \"\";\n                if (Array.isArray(extraData)) {\n                    for (var i = 0; i < extraData.length; i++) {\n                        parseData += format.replace(\"${data}\", extraData[i]);\n                    }\n                } else {\n                    parseData += format.replace(\"${data}\", extraData);\n                }\n                return parseData;\n            },\n\n            getValue(key, item) {\n                const field = typeof key !== \"object\" ? key : key.field;\n                let indexes = typeof field !== \"string\" ? [] : field.split(\".\");\n                let value = this.defaultValue;\n\n                if (!field)\n                    value = item;\n                else if (indexes.length > 1)\n                    value = this.getValueFromNestedItem(item, indexes);\n                else\n                    value = this.parseValue(item[field]);\n\n                if (key.hasOwnProperty('callback'))\n                    value = this.getValueFromCallback(value, key.callback);\n\n                return value;\n            },\n\n            /*\n            convert values with newline \\n characters into <br/>\n            */\n            valueReformattedForMultilines(value) {\n                if (typeof (value) == \"string\") return (value.replace(/\\n/ig, \"<br/>\"));\n                else return (value);\n            },\n\n            getValueFromNestedItem(item, indexes) {\n                let nestedItem = item;\n                for (let index of indexes) {\n                    if (nestedItem)\n                        nestedItem = nestedItem[index];\n                }\n                return this.parseValue(nestedItem);\n            },\n\n            getValueFromCallback(item, callback) {\n                if (typeof callback !== \"function\")\n                    return this.defaultValue\n                const value = callback(item);\n                return this.parseValue(value);\n            },\n            parseValue(value) {\n                return value || value === 0 || typeof value === 'boolean'\n                    ? value\n                    : this.defaultValue;\n            },\n            base64ToBlob(data, mime) {\n                let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n                let bstr = atob(base64);\n                let n = bstr.length;\n                let u8arr = new Uint8ClampedArray(n);\n                while (n--) {\n                    u8arr[n] = bstr.charCodeAt(n);\n                }\n                return new Blob([u8arr], {type: mime});\n            }\n        } // end methods\n    };\n</script>\n"]}]}